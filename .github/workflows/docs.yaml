name: Docs

on:
  pull_request:
  push:
    branches:
      - nightly
      - main
      - release/*
  workflow_dispatch:

jobs:
  tests:
    strategy:
      matrix:
        # TODO add up to 3.13
        python_version: ["3.10"]
        cuda_arch_version: ["12.6"]
      fail-fast: false
    uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
    permissions:
      id-token: write
      contents: read
    with:
      runner: linux.g5.4xlarge.nvidia.gpu
      repository: pytorch/audio
      gpu-arch-type: cuda
      gpu-arch-version: ${{ matrix.cuda_arch_version }}
      timeout: 120

      script: |
        set -ex
        # Set up Environment Variables
        export PYTHON_VERSION="${{ matrix.python_version }}"
        export PIP_PROGRESS_BAR=off
        export CONDA_QUIET=1
        export CU_VERSION="${{ matrix.cuda_arch_version }}"
        export CU_VERSION_WITHOUT_PERIODS="$(echo "${{ matrix.cuda_arch_version }}" | sed 's/\.//g')"
        # Set UPLOAD_CHANNEL
        if [[(${GITHUB_EVENT_NAME} = 'pull_request' && (${GITHUB_BASE_REF} = 'release'*)) || (${GITHUB_REF} = 'refs/heads/release'*) ]]; then
          export UPLOAD_CHANNEL=test
        else
          export UPLOAD_CHANNEL=nightly
        fi

        echo "::group::Create conda env"
        # Mark Build Directory Safe
        git config --global --add safe.directory /__w/audio/audio
        conda create --quiet -y --prefix ci_env python="${PYTHON_VERSION} nvidia/label/cuda-${{ matrix.cuda-version }}.0::libnpp nvidia::cuda-nvrtc=${{ matrix.cuda-version }} nvidia::cuda-toolkit=${{ matrix.cuda-version }} nvidia::cuda-cudart=${{ matrix.cuda-version }} nvidia::cuda-driver-dev=${{ matrix.cuda-version }} conda-forge::ffmpeg=${{ matrix.ffmpeg-version }} cmake ninja"
        conda activate ./ci_env
        conda info

        python -m pip install --upgrade pip

        echo "::endgroup::"
        echo "::group::Install PyTorch and TorchCodec"
        PYTORCH_WHEEL_INDEX="https://download.pytorch.org/whl/${UPLOAD_CHANNEL}/cu${CU_VERSION_WITHOUT_PERIODS}"
        python -m pip install --progress-bar=off --pre torch torchcodec --index-url="${PYTORCH_WHEEL_INDEX}"
        python -c 'import torch; print(f"{torch.__version__}"); print(f"{torch.__file__}"); print(f"{torch.cuda.is_available()=}")'
        echo "::endgroup::"
        echo "::group::Build and install TorchAudio"
        python -m pip install . -v --no-build-isolation
        echo "::endgroup::"
        echo "::group::Build TorchAudio documentation"
        cd docs
        python -m pip install -r requirements.txt -r requirements-tutorials.txt
        make html
        echo "::endgroup::"
        # TODO: upload
