name: Unit-tests on Linux CPU

on:
    pull_request:
    push:
        branches:
            - nightly
            - main
            - release/*
    workflow_dispatch:
jobs:
    build:
        strategy:
            matrix:
                # TODO add up to 3.13
                python_version: ["3.10"]
            fail-fast: false
        uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
        permissions:
            id-token: write
            contents: read
        with:
            repository: pytorch/audio
            timeout: 120
            job-name: test
            script: |
                set -ex
                # Set up Environment Variables
                export PYTHON_VERSION="${{ matrix.python_version }}"
                export PIP_PROGRESS_BAR=off
                export CONDA_QUIET=1

                # Set UPLOAD_CHANNEL
                if [[(${GITHUB_EVENT_NAME} = 'pull_request' && (${GITHUB_BASE_REF} = 'release'*)) || (${GITHUB_REF} = 'refs/heads/release'*) ]]; then
                  export UPLOAD_CHANNEL=test
                else
                  export UPLOAD_CHANNEL=nightly
                fi

                echo "::group::Create conda env"
                # Mark Build Directory Safe
                git config --global --add safe.directory /__w/audio/audio
                conda create -c conda-forge --strict-channel-priority -y --prefix ci_env python="${PYTHON_VERSION}" "ffmpeg=7" cmake ninja
                conda activate ./ci_env
                conda info

                python -m pip install --upgrade pip

                echo "::endgroup::"
                echo "::group::Install PyTorch and TorchCodec"
                PYTORCH_WHEEL_INDEX="https://download.pytorch.org/whl/${UPLOAD_CHANNEL}/cpu"
                python -m pip install --progress-bar=off --pre torch torchcodec --index-url="${PYTORCH_WHEEL_INDEX}"
                python -m pip install parameterized requests coverage pytest pytest-cov scipy numpy expecttest
                python -c 'import torch; print(f"{torch.__version__}"); print(f"{torch.__file__}"); print(f"{torch.cuda.is_available()=}")'
                echo "::endgroup::"
                echo "::group::Build and install TorchAudio"
                python -m pip install . -v --no-build-isolation
                echo "::endgroup::"
                echo "::group::Run Tests"
                cd test
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_APPLY_CMVN_SLIDING=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_FBANK_FEATS=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_KALDI_PITCH_FEATS=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_MFCC_FEATS=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_SPECTROGRAM_FEATS=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_KALDI=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CUDA=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_HW_ACCEL=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_ON_PYTHON_310=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_AUDIO_OUT_DEVICE=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_MACOS=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_TEMPORARY_DISABLED=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_SOX_DECODER=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_SOX_ENCODER=true
                export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_FFMPEG=true
                pytest torchaudio_unittest -k "not torchscript and not fairseq and not demucs"
                echo "::endgroup::"
