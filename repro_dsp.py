import torch
from torchaudio.prototype.functional import oscillator_bank, adsr_envelope

import matplotlib.pyplot as plt


def osci():
    sample_rate = 8000
    num_frames = 8000 * 3

    freq = torch.ones((num_frames, 1)) * torch.tensor([[2000]])  # , 3000]])
    amps = torch.ones_like(freq)
    waveform32 = oscillator_bank(freq, amps, sample_rate)

    freq = freq.to(torch.float64)
    amps = freq.to(torch.float64)
    waveform64 = oscillator_bank(freq, amps, sample_rate)

    fig, axes = plt.subplots(2, 1, sharex=True, sharey=True)
    fig.suptitle("Precision and waveform generated by oscillator_bank")
    _, _, _, cax = axes[0].specgram(waveform32, Fs=sample_rate)
    axes[0].set(title="float32", ylabel="Frequency [Hz]")
    fig.colorbar(cax)

    _, _, _, cax = axes[1].specgram(waveform64, Fs=sample_rate)
    axes[1].set(title="float64", xlabel="time [s]", ylabel="Frequency [Hz]")
    plt.colorbar(cax)
    plt.tight_layout()
    plt.subplots_adjust(left=0.2, top=0.85, right=0.9,bottom=0.15)
    fig.savefig("oscillator_precision.png", dpi=200, transparent=True)


def adsr():
    num_frames = 8000
    configs = [
        {"attack": 0.2, "hold": 0.2, "decay": 0.2, "sustain": 0.5, "release": 0.2},
        {"attack": 0.02, "decay": 0.98, "sustain": 0, "release": 0},
        {"attack": 0.01, "hold": 0.3, "decay": 0.05, "sustain": 0.01, "release": 0},
        {"attack": 0.98, "decay": 0, "sustain": 1, "release": 0.02},
    ]
    waveforms = [adsr_envelope(**config, num_frames=num_frames) for config in configs]
    t = torch.linspace(0, 1.0, num_frames)

    fig, axes = plt.subplots(len(configs), 1, sharex=True, sharey=True)
    for ax, config, waveform in zip(axes, configs, waveforms):
        ax.plot(t, waveform)
        ax.grid(True)
        ax.set(title=', '.join(f'{k}: {v}' for k, v in config.items()))
    fig.tight_layout()
    fig.savefig("adsr.png", dpi=200)

# osci()
adsr()
plt.show()
